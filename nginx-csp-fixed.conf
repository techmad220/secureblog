# Fixed CSP Configuration - Properly allows images and CSS
# While maintaining zero JavaScript policy

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name secureblog.example.com;
    
    # Document root
    root /var/www/secureblog;
    index index.html;
    
    # SSL Configuration
    ssl_certificate /etc/letsencrypt/live/secureblog.example.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/secureblog.example.com/privkey.pem;
    ssl_protocols TLSv1.3 TLSv1.2;
    ssl_ciphers 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Only allow GET and HEAD methods
    if ($request_method !~ ^(GET|HEAD)$) {
        return 405;
    }
    
    # Block query strings entirely (unless needed)
    if ($query_string != "") {
        return 400;
    }
    
    # Request size limit (1KB)
    client_max_body_size 1k;
    client_body_buffer_size 1k;
    client_header_buffer_size 1k;
    large_client_header_buffers 2 1k;
    
    # FIXED Content Security Policy - Explicitly allows images and CSS
    add_header Content-Security-Policy "default-src 'none'; img-src 'self' data:; style-src 'self'; font-src 'self'; base-uri 'none'; form-action 'none'; frame-ancestors 'none'; block-all-mixed-content; upgrade-insecure-requests" always;
    
    # Additional Security Headers
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer" always;
    add_header Permissions-Policy "accelerometer=(), battery=(), camera=(), display-capture=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), midi=(), payment=(), usb=()" always;
    add_header Cross-Origin-Opener-Policy "same-origin" always;
    add_header Cross-Origin-Embedder-Policy "require-corp" always;
    add_header Cross-Origin-Resource-Policy "same-origin" always;
    
    # HSTS with preload
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    
    # Caching directives for different file types
    
    # HTML files - no cache, must revalidate
    location ~* \.(html|htm)$ {
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;
        add_header Expires "0" always;
        
        # Reapply security headers for HTML
        add_header Content-Security-Policy "default-src 'none'; img-src 'self' data:; style-src 'self'; font-src 'self'; base-uri 'none'; form-action 'none'; frame-ancestors 'none'; block-all-mixed-content; upgrade-insecure-requests" always;
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
    }
    
    # Hashed static assets - immutable caching
    location ~* \.[0-9a-f]{8,}\.(css|js|jpg|jpeg|png|gif|svg|woff|woff2|ttf|eot)$ {
        add_header Cache-Control "public, max-age=31536000, immutable" always;
        add_header X-Asset-Type "hashed" always;
        
        # Security headers for assets
        add_header X-Content-Type-Options "nosniff" always;
        add_header Cross-Origin-Resource-Policy "same-origin" always;
    }
    
    # Regular CSS files - medium cache
    location ~* \.(css)$ {
        add_header Cache-Control "public, max-age=604800" always;
        add_header X-Content-Type-Options "nosniff" always;
    }
    
    # Images - long cache
    location ~* \.(jpg|jpeg|png|gif|svg|webp|ico)$ {
        add_header Cache-Control "public, max-age=2592000" always;
        add_header X-Content-Type-Options "nosniff" always;
    }
    
    # Fonts - long cache with CORS
    location ~* \.(woff|woff2|ttf|eot|otf)$ {
        add_header Cache-Control "public, max-age=2592000" always;
        add_header Access-Control-Allow-Origin "*" always;
        add_header X-Content-Type-Options "nosniff" always;
    }
    
    # Block access to hidden files
    location ~ /\. {
        deny all;
        return 404;
    }
    
    # Block JavaScript files entirely
    location ~* \.(js|mjs|jsx|ts|tsx)$ {
        deny all;
        return 404;
    }
    
    # Block executable extensions
    location ~* \.(php|asp|aspx|jsp|cgi|pl|py|rb|sh|exe|dll|bat|cmd|com)$ {
        deny all;
        return 404;
    }
    
    # Security.txt
    location = /.well-known/security.txt {
        add_header Content-Type "text/plain" always;
        add_header Cache-Control "max-age=86400" always;
    }
    
    # Robots.txt
    location = /robots.txt {
        add_header Content-Type "text/plain" always;
        add_header Cache-Control "max-age=86400" always;
    }
    
    # Default location
    location / {
        try_files $uri $uri/ /index.html;
        
        # Reapply all security headers
        add_header Content-Security-Policy "default-src 'none'; img-src 'self' data:; style-src 'self'; font-src 'self'; base-uri 'none'; form-action 'none'; frame-ancestors 'none'; block-all-mixed-content; upgrade-insecure-requests" always;
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer" always;
        add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    }
    
    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        internal;
        add_header Cache-Control "no-cache" always;
    }
    
    location = /50x.html {
        internal;
        add_header Cache-Control "no-cache" always;
    }
}

# Redirect HTTP to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name secureblog.example.com;
    
    # HSTS header even on redirect
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    
    return 301 https://$server_name$request_uri;
}