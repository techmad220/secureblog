# Fort Knox Nginx Configuration - Ultra-Hardened Static Site
# Security-first configuration with minimal attack surface

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=global:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=strict:10m rate=1r/s;

# Connection limiting
limit_conn_zone $binary_remote_addr zone=perip:10m;

server {
    listen 443 ssl http2;
    server_name secureblog.com www.secureblog.com;
    root /var/www/secureblog;

    # Ultra-strict request limits
    client_max_body_size 1k;              # 1KB limit as specified
    client_header_buffer_size 1k;         # Tiny header buffer
    large_client_header_buffers 2 1k;     # Minimal large header buffers
    client_body_timeout 10s;              # Fast body timeout
    client_header_timeout 10s;            # Fast header timeout
    send_timeout 10s;                     # Fast send timeout
    keepalive_timeout 10s;                # Short keepalive
    keepalive_requests 10;                # Limited requests per connection

    # Hide server information (security through obscurity)
    server_tokens off;
    more_clear_headers Server;
    more_set_headers "Server: SecureBlog/1.0";

    # TLS hardening - TLS 1.3 only
    ssl_certificate     /etc/ssl/private/fullchain.pem;
    ssl_certificate_key /etc/ssl/private/privkey.pem;
    ssl_protocols TLSv1.3;                # TLS 1.3 ONLY
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;              # Disable session tickets for perfect forward secrecy
    ssl_stapling on; 
    ssl_stapling_verify on;
    resolver 1.1.1.1 1.0.0.1 valid=300s ipv6=off;

    # Comprehensive security headers (enforced at server level)
    add_header Content-Security-Policy "default-src 'none'; base-uri 'none'; frame-ancestors 'none'; form-action 'none'; script-src 'none'; connect-src 'none'; img-src 'self' data:; style-src 'self'; font-src 'self'; object-src 'none'; media-src 'self'; worker-src 'none'; manifest-src 'self'; frame-src 'none'; upgrade-insecure-requests" always;
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer" always;
    add_header Permissions-Policy "accelerometer=(), ambient-light-sensor=(), autoplay=(), battery=(), camera=(), cross-origin-isolated=(), display-capture=(), document-domain=(), encrypted-media=(), execution-while-not-rendered=(), execution-while-out-of-viewport=(), fullscreen=(), geolocation=(), gyroscope=(), keyboard-map=(), magnetometer=(), microphone=(), midi=(), payment=(), picture-in-picture=(), publickey-credentials-get=(), screen-wake-lock=(), sync-xhr=(), usb=(), web-share=(), xr-spatial-tracking=()" always;
    add_header Cross-Origin-Opener-Policy "same-origin" always;
    add_header Cross-Origin-Embedder-Policy "require-corp" always;
    add_header Cross-Origin-Resource-Policy "same-origin" always;
    
    # Additional security headers
    add_header X-Permitted-Cross-Domain-Policies "none" always;
    add_header X-Download-Options "noopen" always;
    add_header X-Robots-Tag "noindex, nofollow, nosnippet, noarchive" always;

    # Basic configuration
    index index.html;
    autoindex off;                        # Never show directory listings
    charset utf-8;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    gzip on;
    gzip_vary on;
    gzip_min_length 256;
    gzip_types text/plain text/css application/json text/xml application/xml;

    # Only allow GET and HEAD methods (critical security requirement)
    if ($request_method !~ ^(GET|HEAD)$ ) {
        return 405 "Method $request_method not allowed";
    }

    # Apply rate limiting to all requests
    limit_req zone=global burst=20 nodelay;
    limit_conn perip 10;

    # Block dangerous query patterns immediately
    if ($query_string ~* "(__proto__|<script|javascript:|vbscript:|data:text/html|onload=|onerror=|onclick=|eval\(|alert\()") {
        return 451 "Blocked by security policy";
    }

    # Block dangerous paths
    if ($uri ~* "(\.\.\/|<script|javascript:|onload=|onerror=)") {
        return 451 "Blocked by security policy";
    }

    # Content-hashed immutable assets (1 year cache)
    location ~* \-[0-9a-f]{8,}\.(css|js|png|jpg|jpeg|gif|svg|ico|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, max-age=31536000, immutable" always;
        add_header X-Cache-Status "IMMUTABLE" always;
        
        # Apply security headers to assets too
        add_header Content-Security-Policy "default-src 'none'" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "DENY" always;
        
        try_files $uri =404;
    }

    # Regular static assets (1 hour cache)
    location ~* \.(css|js|png|jpg|jpeg|gif|svg|ico|webp|woff|woff2|ttf|eot)$ {
        expires 1h;
        add_header Cache-Control "public, max-age=3600" always;
        add_header X-Cache-Status "STATIC" always;
        
        # Security headers for regular assets
        add_header Content-Security-Policy "default-src 'none'" always;
        add_header X-Content-Type-Options "nosniff" always;
        
        try_files $uri =404;
    }

    # HTML files - no cache, strict security
    location ~* \.(html|htm)$ {
        expires -1;
        add_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0" always;
        add_header Pragma "no-cache" always;
        add_header X-Cache-Status "NO-CACHE" always;
        
        # Extra strict rate limiting for HTML
        limit_req zone=strict burst=5 nodelay;
        
        try_files $uri =404;
    }

    # Special files (robots.txt, sitemap.xml, etc.)
    location ~* \.(xml|txt|json)$ {
        expires 5m;
        add_header Cache-Control "public, max-age=300" always;
        add_header X-Cache-Status "SHORT-CACHE" always;
        
        try_files $uri =404;
    }

    # Security.txt and well-known files
    location /.well-known/ {
        expires 1h;
        add_header Cache-Control "public, max-age=3600" always;
        try_files $uri =404;
    }

    # Root and index handling
    location = / {
        limit_req zone=global burst=10 nodelay;
        try_files /index.html =404;
    }

    # Default location with strict controls
    location / {
        limit_req zone=global burst=10 nodelay;
        
        # Block access to hidden files
        location ~ /\. {
            return 404;
        }
        
        # Block access to backup files
        location ~* \.(bak|backup|swp|tmp)$ {
            return 404;
        }
        
        try_files $uri $uri/ =404;
    }

    # Logging with privacy considerations
    access_log /var/log/nginx/secureblog_access.log combined buffer=64k flush=5m;
    error_log  /var/log/nginx/secureblog_error.log warn;
}

# HTTP to HTTPS redirect server
server {
    listen 80;
    server_name secureblog.com www.secureblog.com;
    
    # Security headers even for redirects
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    
    # Permanent redirect to HTTPS
    return 301 https://$server_name$request_uri;
}