# security-headers.conf - Fort Knox-level security headers
# Include this in your nginx server block

# Content Security Policy - Zero JavaScript enforcement
add_header Content-Security-Policy "default-src 'none'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'none'; script-src 'none'; object-src 'none'; frame-src 'none'; base-uri 'self'; form-action 'self'; frame-ancestors 'none';" always;

# CSP Reporting (for monitoring violations)
add_header Content-Security-Policy-Report-Only "default-src 'none'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'none'; script-src 'none'; object-src 'none'; frame-src 'none'; base-uri 'self'; form-action 'self'; frame-ancestors 'none'; report-uri /csp-report; report-to csp-endpoint;" always;

# Reporting API endpoints
add_header Report-To '{"group":"csp-endpoint","max_age":10886400,"endpoints":[{"url":"https://secureblog.com/security-reports/csp"}],"include_subdomains":true}' always;
add_header Reporting-Endpoints 'csp-endpoint="https://secureblog.com/security-reports/csp", hpkp-endpoint="https://secureblog.com/security-reports/hpkp"' always;

# Strict Transport Security (HSTS)
add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

# Frame Options
add_header X-Frame-Options "DENY" always;

# Content Type Options
add_header X-Content-Type-Options "nosniff" always;

# XSS Protection
add_header X-XSS-Protection "1; mode=block" always;

# Referrer Policy
add_header Referrer-Policy "strict-origin-when-cross-origin" always;

# Permissions Policy (Feature Policy replacement)
add_header Permissions-Policy "accelerometer=(), ambient-light-sensor=(), autoplay=(), battery=(), bluetooth=(), browsing-topics=(), camera=(), clipboard-read=(), clipboard-write=(), display-capture=(), document-domain=(), encrypted-media=(), fullscreen=(), geolocation=(), gyroscope=(), hid=(), identity-credentials-get=(), idle-detection=(), interest-cohort=(), keyboard-map=(), local-fonts=(), magnetometer=(), microphone=(), midi=(), otp-credentials=(), payment=(), picture-in-picture=(), publickey-credentials-create=(), publickey-credentials-get=(), screen-wake-lock=(), serial=(), speaker-selection=(), storage-access=(), sync-xhr=(), usb=(), web-share=(), window-management=(), xr-spatial-tracking=()" always;

# Cross-Origin Embedder Policy
add_header Cross-Origin-Embedder-Policy "require-corp" always;

# Cross-Origin Opener Policy  
add_header Cross-Origin-Opener-Policy "same-origin" always;

# Cross-Origin Resource Policy
add_header Cross-Origin-Resource-Policy "same-origin" always;

# Cache Control for HTML (no cache for dynamic content)
location ~* \.html$ {
    add_header Cache-Control "no-cache, no-store, must-revalidate, max-age=0" always;
    add_header Pragma "no-cache" always;
    add_header Expires "0" always;
    
    # Security headers (inherit from main config but ensure they're set)
    include /etc/nginx/security-headers.conf;
}

# Cache Control for static assets (with integrity checks)
location ~* \.(css|js|png|jpg|jpeg|gif|svg|ico|woff|woff2|ttf|eot)$ {
    # Long cache for static assets (they have hashed filenames)
    add_header Cache-Control "public, immutable, max-age=31536000" always;
    
    # Security headers
    include /etc/nginx/security-headers.conf;
    
    # Additional security for CSS/JS
    location ~* \.(css|js)$ {
        add_header X-Content-Type-Options "nosniff" always;
        # Ensure CSS/JS files are served with correct MIME types
        location ~* \.css$ {
            add_header Content-Type "text/css; charset=utf-8" always;
        }
        location ~* \.js$ {
            # Should never serve JS files in zero-JS mode, but just in case
            add_header Content-Type "application/javascript; charset=utf-8" always;
            # Return 404 for any JS files to enforce zero-JS policy
            return 404;
        }
    }
}

# Special handling for manifest and security files
location = /manifest.json {
    add_header Content-Type "application/json; charset=utf-8" always;
    add_header Cache-Control "public, max-age=300" always;  # 5 minutes
    include /etc/nginx/security-headers.conf;
}

location = /integrity.sha256 {
    add_header Content-Type "text/plain; charset=utf-8" always;
    add_header Cache-Control "public, max-age=300" always;  # 5 minutes
    include /etc/nginx/security-headers.conf;
}

# Security reporting endpoint
location /security-reports/ {
    # Only accept POST requests
    limit_except POST {
        deny all;
    }
    
    # Rate limit security reports
    limit_req zone=security_reports burst=10 nodelay;
    
    # Log security violations
    access_log /var/log/nginx/security-reports.log combined;
    
    # Return success but don't actually process (or forward to security team)
    return 204;
}

# Block common attack paths
location ~* \.(php|asp|aspx|jsp|cgi)$ {
    return 404;
}

# Block hidden files
location ~ /\. {
    return 404;
}

# Block backup files
location ~* \.(bak|backup|old|orig|save|swo|swp|tmp|temp)$ {
    return 404;
}

# Security.txt endpoint (RFC 9116)
location = /.well-known/security.txt {
    add_header Content-Type "text/plain; charset=utf-8" always;
    add_header Cache-Control "public, max-age=86400" always;  # 24 hours
    include /etc/nginx/security-headers.conf;
}

# Additional security measures
# Limit request size
client_max_body_size 1M;

# Hide nginx version
server_tokens off;

# Limit request methods to GET, HEAD, POST
if ($request_method !~ ^(GET|HEAD|POST)$) {
    return 405;
}

# Rate limiting zones (define in http block)
# limit_req_zone $binary_remote_addr zone=main:10m rate=10r/s;
# limit_req_zone $binary_remote_addr zone=security_reports:1m rate=1r/s;

# Apply rate limiting
limit_req zone=main burst=20 nodelay;