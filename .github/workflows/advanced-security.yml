name: GitHub Advanced Security
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

# Minimal permissions for security scanning
permissions:
  security-events: write  # for uploading SARIF results
  contents: read         # for repository access
  actions: read          # for workflow access
  pull-requests: read    # for PR analysis

jobs:
  # CodeQL Analysis for Go and JavaScript
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    strategy:
      matrix:
        language: ['go', 'javascript']
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4.2.2
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@4dd16135b69a43b6c8efb853346f8437d92d3c93 # v3.26.6
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality
          
      - name: Setup Go (for Go analysis)
        if: matrix.language == 'go'
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version: '1.23.x'
          
      - name: Build Go code (for analysis)
        if: matrix.language == 'go'
        run: |
          go mod download
          go build ./...
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@4dd16135b69a43b6c8efb853346f8437d92d3c93 # v3.26.6
        with:
          category: ${{ matrix.language }}

  # Dependency Review
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4.2.2
        
      - name: Dependency Review
        uses: actions/dependency-review-action@5a2ce3f5b92ee19cbb1541a4984c76d921601d7c # v4.3.4
        with:
          fail-on-severity: moderate
          allow-ghsas: # Allow specific GHSAs if needed
          deny-licenses: GPL-2.0, GPL-3.0, AGPL-1.0, AGPL-3.0
          comment-summary-in-pr: always

  # Supply Chain Security Analysis
  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4.2.2
        
      - name: Setup Go
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version: '1.23.x'
          
      # Scan for vulnerabilities
      - name: Run Govulncheck
        uses: golang/govulncheck-action@b625fbe08f3bccbe446d94fbf87fcc875a4f50ee # v1.0.4
        with:
          go-version-input: '1.23.x'
          args: '-format sarif -o govulncheck.sarif ./...'
          
      - name: Upload Govulncheck SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@4dd16135b69a43b6c8efb853346f8437d92d3c93 # v3.26.6
        with:
          sarif_file: govulncheck.sarif
          category: govulncheck
          
      # Scan dependencies for known issues
      - name: Run Nancy (dependency scanner)
        run: |
          go install github.com/sonatypecommunity/nancy@latest
          go list -json -deps ./... | nancy sleuth --output-format sarif > nancy.sarif
          
      - name: Upload Nancy SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@4dd16135b69a43b6c8efb853346f8437d92d3c93 # v3.26.6
        with:
          sarif_file: nancy.sarif
          category: nancy
          
      # Scan for secrets
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@f9d29bd1598e73c7387e5f3c6311fd4e7e3c0367 # v2.3.7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        with:
          args: --sarif-report gitleaks.sarif --no-banner --redact
          
      - name: Upload Gitleaks SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@4dd16135b69a43b6c8efb853346f8437d92d3c93 # v3.26.6
        with:
          sarif_file: gitleaks.sarif
          category: gitleaks

  # License Compliance Check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4.2.2
        
      - name: Setup Go
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version: '1.23.x'
          
      - name: Install go-licenses
        run: go install github.com/google/go-licenses@latest
        
      - name: Check licenses
        run: |
          echo "Checking dependency licenses..."
          
          # Get all licenses
          go-licenses csv ./... > licenses.csv
          
          # Check for forbidden licenses
          FORBIDDEN_LICENSES=(
            "GPL-2.0"
            "GPL-3.0" 
            "AGPL-1.0"
            "AGPL-3.0"
            "LGPL-2.1"
            "LGPL-3.0"
            "OSL-3.0"
            "EPL-1.0"
            "EPL-2.0"
            "CDDL-1.0"
            "CDDL-1.1"
          )
          
          forbidden_found=0
          for license in "${FORBIDDEN_LICENSES[@]}"; do
            if grep -q "$license" licenses.csv; then
              echo "❌ Forbidden license found: $license"
              grep "$license" licenses.csv
              forbidden_found=1
            fi
          done
          
          if [ $forbidden_found -eq 1 ]; then
            echo "💥 License compliance check failed"
            exit 1
          else
            echo "✅ All licenses are compliant"
          fi
          
      - name: Upload license report
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: license-report
          path: licenses.csv

  # Security Regression Guard 
  security-regression-guard:
    name: Security Regression Guard
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4.2.2
        
      - name: Setup Go
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # v5.1.0
        with:
          go-version: '1.23.x'
          
      - name: Build site
        run: |
          # Build with our deterministic script
          bash ./scripts/build-deterministic.sh
          
      - name: Run security regression tests
        run: |
          # Run our comprehensive security test suite
          bash ./scripts/security-regression-guard.sh dist/public
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: security-test-results
          path: |
            dist/
            *.log

  # Trivy Security Scanning
  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4.2.2
        
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@6e7b7d1fd3e4fef0c5fa8cce1229c54b2c9bd0d8 # v0.24.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          
      - name: Upload Trivy scan results
        if: always()
        uses: github/codeql-action/upload-sarif@4dd16135b69a43b6c8efb853346f8437d92d3c93 # v3.26.6
        with:
          sarif_file: 'trivy-results.sarif'
          category: trivy

  # Security Summary Report
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql, supply-chain-security, license-check, security-regression-guard, trivy-scan]
    if: always()
    
    steps:
      - name: Generate Security Report
        run: |
          echo "# 🛡️ Security Analysis Summary" > security-report.md
          echo "" >> security-report.md
          echo "**Repository:** ${{ github.repository }}" >> security-report.md
          echo "**Commit:** ${{ github.sha }}" >> security-report.md
          echo "**Date:** $(date -u)" >> security-report.md
          echo "" >> security-report.md
          
          # Job status summary
          echo "## 📊 Scan Results" >> security-report.md
          echo "" >> security-report.md
          echo "| Check | Status |" >> security-report.md
          echo "|-------|--------|" >> security-report.md
          echo "| CodeQL Analysis | ${{ needs.codeql.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> security-report.md
          echo "| Supply Chain Security | ${{ needs.supply-chain-security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> security-report.md
          echo "| License Compliance | ${{ needs.license-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> security-report.md
          echo "| Security Regression Guard | ${{ needs.security-regression-guard.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> security-report.md
          echo "| Trivy Scan | ${{ needs.trivy-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> security-report.md
          echo "" >> security-report.md
          
          # Security features
          echo "## 🔒 Security Features Validated" >> security-report.md
          echo "" >> security-report.md
          echo "- ✅ Zero JavaScript enforcement" >> security-report.md
          echo "- ✅ Content Security Policy compliance" >> security-report.md
          echo "- ✅ XSS prevention measures" >> security-report.md
          echo "- ✅ Supply chain security" >> security-report.md
          echo "- ✅ Dependency vulnerability scanning" >> security-report.md
          echo "- ✅ Secret scanning" >> security-report.md
          echo "- ✅ License compliance" >> security-report.md
          echo "- ✅ Static code analysis" >> security-report.md
          echo "" >> security-report.md
          
          echo "## 📋 Next Steps" >> security-report.md
          echo "" >> security-report.md
          if [[ "${{ needs.codeql.result }}" != "success" || "${{ needs.supply-chain-security.result }}" != "success" || "${{ needs.license-check.result }}" != "success" || "${{ needs.security-regression-guard.result }}" != "success" || "${{ needs.trivy-scan.result }}" != "success" ]]; then
            echo "⚠️ **Security issues detected!** Review failed checks before proceeding." >> security-report.md
          else
            echo "🎉 **All security checks passed!** Repository is secure for deployment." >> security-report.md
          fi
          
          cat security-report.md
          
      - name: Upload Security Report
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: security-report
          path: security-report.md
          
      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });