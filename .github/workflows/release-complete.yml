name: Complete Release with Security Attestations
on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # step-security/harden-runner@v2
        with:
          egress-policy: audit
          
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Go
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # actions/setup-go@v5
        with:
          go-version: '1.23'
          
      - name: Install tools
        run: |
          # Install cosign
          curl -LO https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64
          chmod +x cosign-linux-amd64
          sudo mv cosign-linux-amd64 /usr/local/bin/cosign
          
          # Install syft for SBOM
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          
          # Install cyclonedx for additional SBOM format
          go install github.com/CycloneDX/cyclonedx-gomod/cmd/cyclonedx-gomod@latest
          
      - name: Run security checks
        run: |
          # No-JS enforcement
          ./scripts/no-js-enforcer.sh dist || true
          
          # Markdown sanitization
          ./scripts/markdown-sanitizer.sh content dist/content
          
          # Content pipeline sanitization
          ./scripts/pdf-svg-sanitizer.sh content dist/sanitized
          
      - name: Build release
        run: |
          # Build without UI components
          ./scripts/build-release-safe.sh
          
          # Hash assets for cache integrity
          ./scripts/content-hash-assets.sh dist
          
      - name: Create release artifacts
        run: |
          # Main distribution
          tar -czf secureblog-${{ github.ref_name }}.tar.gz -C dist .
          
          # Generate checksums
          sha256sum secureblog-${{ github.ref_name }}.tar.gz > checksums.sha256
          sha512sum secureblog-${{ github.ref_name }}.tar.gz > checksums.sha512
          
          # Create digest for signing
          echo "DIGEST=$(sha256sum secureblog-${{ github.ref_name }}.tar.gz | cut -d' ' -f1)" >> $GITHUB_ENV
          
      - name: Generate SBOM (SPDX)
        run: |
          syft . -o spdx-json > sbom.spdx.json
          syft . -o spdx > sbom.spdx
          
      - name: Generate SBOM (CycloneDX)
        run: |
          cyclonedx-gomod app -json -output sbom.cyclonedx.json
          cyclonedx-gomod app -xml -output sbom.cyclonedx.xml
          
      - name: Sign artifacts with cosign
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          # Sign main artifact
          cosign sign-blob --yes \
            --output-certificate secureblog-${{ github.ref_name }}.tar.gz.cert \
            --output-signature secureblog-${{ github.ref_name }}.tar.gz.sig \
            secureblog-${{ github.ref_name }}.tar.gz
            
          # Sign SBOM
          cosign sign-blob --yes \
            --output-certificate sbom.spdx.json.cert \
            --output-signature sbom.spdx.json.sig \
            sbom.spdx.json
            
      - name: Generate SLSA provenance
        uses: slsa-framework/slsa-github-generator/actions/generator/generic/create-base64-subjects@v2.0.0
        id: slsa
        with:
          artifacts: secureblog-${{ github.ref_name }}.tar.gz
          
      - name: Create verification instructions
        run: |
          cat > VERIFY.md << 'EOF'
          # Release Verification Instructions
          
          ## Quick Verification (One Command)
          
          ```bash
          # Verify with cosign
          cosign verify-blob \
            --certificate secureblog-${{ github.ref_name }}.tar.gz.cert \
            --signature secureblog-${{ github.ref_name }}.tar.gz.sig \
            --certificate-identity-regexp "https://github.com/${{ github.repository }}/.github/workflows/" \
            --certificate-oidc-issuer https://token.actions.githubusercontent.com \
            secureblog-${{ github.ref_name }}.tar.gz
          ```
          
          ## Checksums
          
          - **SHA256:** `${{ env.DIGEST }}`
          - **SHA512:** `$(sha512sum secureblog-${{ github.ref_name }}.tar.gz | cut -d' ' -f1)`
          
          ## Verify Checksums
          
          ```bash
          sha256sum -c checksums.sha256
          sha512sum -c checksums.sha512
          ```
          
          ## SBOM Verification
          
          The Software Bill of Materials (SBOM) is provided in multiple formats:
          - SPDX JSON: `sbom.spdx.json`
          - SPDX: `sbom.spdx`
          - CycloneDX JSON: `sbom.cyclonedx.json`
          - CycloneDX XML: `sbom.cyclonedx.xml`
          
          Verify SBOM signature:
          ```bash
          cosign verify-blob \
            --certificate sbom.spdx.json.cert \
            --signature sbom.spdx.json.sig \
            --certificate-identity-regexp "https://github.com/${{ github.repository }}/.github/workflows/" \
            --certificate-oidc-issuer https://token.actions.githubusercontent.com \
            sbom.spdx.json
          ```
          
          ## SLSA Provenance
          
          This release includes SLSA Level 3 provenance attestation.
          
          ## Security Guarantees
          
          ✅ No JavaScript (verified by no-js-enforcer.sh)
          ✅ Sanitized Markdown (no raw HTML/XSS)
          ✅ Sanitized PDFs/SVGs (no embedded scripts)
          ✅ Content integrity (SHA-256 hashed assets)
          ✅ No UI components in release
          ✅ Signed with keyless Sigstore
          ✅ SLSA Level 3 provenance
          ✅ Complete SBOM in multiple formats
          EOF
          
      - name: Create release notes
        run: |
          cat > RELEASE_NOTES.md << 'EOF'
          # SecureBlog ${{ github.ref_name }}
          
          ## 🔐 Security First Release
          
          This release has been built with maximum security:
          - **Zero JavaScript** - Enforced and verified
          - **Signed artifacts** - Keyless Sigstore signatures
          - **SLSA Level 3** - Build provenance included
          - **Complete SBOM** - SPDX and CycloneDX formats
          - **Content sanitized** - All Markdown, PDFs, and SVGs cleaned
          - **No UI components** - Production build excludes local UI
          
          ## 📦 Quick Start
          
          ```bash
          # Download and verify
          curl -LO https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/secureblog-${{ github.ref_name }}.tar.gz
          curl -LO https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/checksums.sha256
          sha256sum -c checksums.sha256
          
          # Extract
          tar -xzf secureblog-${{ github.ref_name }}.tar.gz
          ```
          
          ## ✅ Verification
          
          **SHA256:** `${{ env.DIGEST }}`
          
          ```bash
          # One-line verification
          cosign verify-blob \
            --certificate-identity-regexp "https://github.com/${{ github.repository }}/" \
            --certificate-oidc-issuer https://token.actions.githubusercontent.com \
            --signature secureblog-${{ github.ref_name }}.tar.gz.sig \
            --certificate secureblog-${{ github.ref_name }}.tar.gz.cert \
            secureblog-${{ github.ref_name }}.tar.gz
          ```
          
          ## 📋 Included Files
          
          - `secureblog-${{ github.ref_name }}.tar.gz` - Main release
          - `checksums.sha256` - SHA256 checksums
          - `checksums.sha512` - SHA512 checksums
          - `*.sig` - Cosign signatures
          - `*.cert` - Signing certificates
          - `sbom.spdx.json` - SPDX Software Bill of Materials
          - `sbom.cyclonedx.json` - CycloneDX SBOM
          - `VERIFY.md` - Detailed verification instructions
          
          ## 🛡️ Security Compliance
          
          - [x] No-JS verification passed
          - [x] Content sanitization complete
          - [x] SLSA provenance attached
          - [x] Signed with Sigstore
          - [x] SBOM generated
          - [x] Checksums provided
          EOF
          
      - name: Create GitHub release
        uses: softprops/action-gh-release@e7a8f85e1c69a9ca6ba914d1d0e05ba8254ed7eb # softprops/action-gh-release@v2
        with:
          name: SecureBlog ${{ github.ref_name }}
          body_path: RELEASE_NOTES.md
          files: |
            secureblog-${{ github.ref_name }}.tar.gz
            secureblog-${{ github.ref_name }}.tar.gz.sig
            secureblog-${{ github.ref_name }}.tar.gz.cert
            checksums.sha256
            checksums.sha512
            sbom.spdx.json
            sbom.spdx.json.sig
            sbom.spdx.json.cert
            sbom.spdx
            sbom.cyclonedx.json
            sbom.cyclonedx.xml
            VERIFY.md
          fail_on_unmatched_files: true
          generate_release_notes: false
          
      - name: Attest build provenance
        uses: actions/attest-build-provenance@ef244123eb79f2f7a7e75d99086184180e6d0018 # actions/attest-build-provenance@v1
        with:
          subject-path: |
            secureblog-${{ github.ref_name }}.tar.gz
            sbom.spdx.json