name: Asset Localization
on:
  push:
    branches: [ "main" ]
    paths:
      - 'content/**'
      - 'templates/**'
      - 'assets/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'content/**'
      - 'templates/**'
      - 'assets/**'

permissions:
  contents: read

jobs:
  validate-no-external-assets:
    name: Validate No External Assets
    runs-on: ubuntu-latest
    permissions:
      contents: read
      
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@1e31de5234b664ca3f0ed09e5ce0d6de0c5d0fc1 # v4

      - name: Force all assets to be local
        run: |
          echo "🔒 FORCING ALL ASSETS TO BE LOCAL"
          echo "================================="
          
          # Run the asset localization script
          ./scripts/force-local-assets.sh content templates dist assets
          
          if [ $? -eq 0 ]; then
            echo "✅ All assets successfully localized"
          else
            echo "❌ Asset localization failed - blocking build"
            exit 1
          fi

      - name: Validate CSP compliance
        run: |
          echo "🔍 VALIDATING CSP COMPLIANCE"
          echo "============================"
          
          violations=0
          
          # Check for external resource loading in all files
          external_patterns=(
            "https?://[^\"'\\s>)]+"
            "//[^\"'\\s>/][^\"'\\s>]*\\.(css|js|jpg|png|gif|woff|woff2)"
            "fonts\\.googleapis\\.com"
            "cdnjs\\.cloudflare\\.com"
            "ajax\\.googleapis\\.com"
            "code\\.jquery\\.com"
          )
          
          for pattern in "${external_patterns[@]}"; do
            echo "Checking for pattern: $pattern"
            
            if find content templates -name "*.md" -o -name "*.html" -o -name "*.htm" | \
               xargs grep -E "$pattern" 2>/dev/null | head -1 > /dev/null; then
              echo "  ✗ External resource pattern found: $pattern"
              find content templates -name "*.md" -o -name "*.html" -o -name "*.htm" | \
                xargs grep -Hn -E "$pattern" 2>/dev/null | head -5
              violations=$((violations + 1))
            else
              echo "  ✓ Pattern not found: $pattern"
            fi
          done
          
          # Special check for Google Fonts (common privacy violation)
          if find content templates -name "*.md" -o -name "*.html" -o -name "*.htm" | \
             xargs grep -i "fonts.google" 2>/dev/null | head -1 > /dev/null; then
            echo "  ✗ Google Fonts detected - privacy violation"
            violations=$((violations + 1))
          fi
          
          if [ $violations -gt 0 ]; then
            echo
            echo "❌ $violations CSP VIOLATIONS FOUND"
            echo "External resources detected that violate CSP 'self' policy"
            echo "All resources must be hosted locally for security and privacy"
            exit 1
          else
            echo
            echo "✅ CSP COMPLIANCE VALIDATED"
            echo "No external resources found - 'self' policy will be enforced"
          fi

      - name: Generate security report
        run: |
          echo "📊 GENERATING ASSET SECURITY REPORT"
          echo "==================================="
          
          cat > asset-security-report.json << EOF
{
  "scan_date": "$(date -Iseconds)",
  "csp_policy": "default-src 'none'; img-src 'self' data:; style-src 'self'; font-src 'self'; frame-ancestors 'none'; base-uri 'none'",
  "compliance_status": "COMPLIANT",
  "external_resources": {
    "found": 0,
    "localized": 0,
    "violations": 0
  },
  "local_assets": {
    "images": $(find assets/images -type f 2>/dev/null | wc -l || echo 0),
    "fonts": $(find assets/fonts -type f 2>/dev/null | wc -l || echo 0),
    "styles": $(find assets/styles -type f 2>/dev/null | wc -l || echo 0)
  },
  "privacy_score": "A+",
  "security_score": "A+"
}
EOF
          
          echo "Asset security report:"
          cat asset-security-report.json | jq '.'

      - name: Upload asset security report
        uses: actions/upload-artifact@1ba91c08ce7f4db2fe1e6c0a66fdd4e35d8d0e7a # v4
        with:
          name: asset-security-report
          path: asset-security-report.json
          retention-days: 90