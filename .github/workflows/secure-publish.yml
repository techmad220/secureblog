name: SecureBlog – Build • Verify • Attest • Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write        # OIDC for cosign & Cloudflare
  contents: read
  actions: read
  packages: read

env:
  CGO_ENABLED: "0"
  GOFLAGS: "-trimpath -mod=readonly -buildvcs=false"
  # Fail fast unless explicitly overridden
  FAIL_ON_WARN: "1"

jobs:
  build-verify-attest:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Go
        uses: actions/setup-go@41dfa10bad2bb2ae585af6ee5bb4d7d973ad74ed # actions/setup-go@v5
        with:
          go-version: "1.22.x"
          cache: true

      # --- Security tooling setup ---
      - name: Install security tools
        run: |
          # Go tools
          go install honnef.co/go/tools/cmd/staticcheck@latest
          go install golang.org/x/vuln/cmd/govulncheck@latest
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          
          # Gitleaks for secret scanning
          curl -sSL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks_linux_amd64.tar.gz | tar xz -C /usr/local/bin gitleaks
          chmod +x /usr/local/bin/gitleaks
          
          # SBOM and attestation tools
          curl -sSL https://github.com/anchore/syft/releases/latest/download/syft_Linux_x86_64.tar.gz | tar xz -C /usr/local/bin syft
          curl -sSL https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64 -o /usr/local/bin/cosign && chmod +x /usr/local/bin/cosign
          
          # Vulnerability scanner
          curl -sSL https://github.com/aquasecurity/trivy/releases/latest/download/trivy_Linux-64bit.tar.gz | tar xz -C /usr/local/bin trivy
          
          # Link checker
          curl -sSL https://github.com/lycheeverse/lychee/releases/latest/download/lychee-v0.14.0-x86_64-unknown-linux-gnu.tar.gz | tar xz -C /usr/local/bin lychee
          chmod +x /usr/local/bin/lychee

      # --- No secrets policy ---
      - name: Enforce OIDC-only (fail if PAT/API key found)
        run: |
          set -euo pipefail
          echo "→ Checking for hardcoded secrets..."
          if git ls-files -z | xargs -0 grep -nE '(ghp_|ghs_|github_pat_|sk-|api[_-]?key|secret[_-]?key)' 2>/dev/null | grep -v "example" | grep -v "test"; then
            echo "::error::Potential secrets found in repo. Use OIDC only."
            exit 1
          fi
          echo "✅ No hardcoded secrets found"

      # --- Leak scan on history delta ---
      - name: Gitleaks scan
        run: |
          echo "→ Running gitleaks..."
          gitleaks detect --no-banner --redact --exit-code 1 || { echo "::error::Gitleaks failed"; exit 1; }
          echo "✅ No secrets detected"

      # --- Static analysis & vuln scan ---
      - name: Staticcheck
        run: |
          echo "→ Running staticcheck..."
          staticcheck ./... || { echo "::error::Staticcheck found issues"; exit 1; }
          echo "✅ Static analysis passed"

      - name: Govulncheck
        run: |
          echo "→ Running govulncheck..."
          govulncheck ./... || { echo "::error::Govulncheck found vulnerabilities"; exit 1; }
          echo "✅ No known vulnerabilities"

      - name: Gosec security scan
        run: |
          echo "→ Running gosec..."
          gosec -fmt json -out gosec-report.json ./...
          if [ -s gosec-report.json ] && grep -q '"severity":"HIGH"' gosec-report.json; then
            echo "::error::Gosec found high severity issues"
            cat gosec-report.json
            exit 1
          fi
          echo "✅ Security scan passed"

      # --- Build generator deterministically ---
      - name: Build generator (deterministic)
        run: |
          set -euo pipefail
          echo "→ Building secureblog generator..."
          go build -ldflags="-s -w -X main.Version=$(git rev-parse --short HEAD)" \
            -trimpath -buildvcs=false \
            -o bin/secureblog ./cmd/main_v2.go
          
          # Verify binary was created
          test -f bin/secureblog
          echo "✅ Generator built successfully"

      # --- Generate site (sandboxed) ---
      - name: Build site
        run: |
          echo "→ Generating static site..."
          if [ -f ./build-sandbox.sh ]; then
            bash ./build-sandbox.sh
          else
            ./bin/secureblog -content=content -output=build -sign=true
          fi
          
          # Verify output exists
          test -d build && [ -n "$(ls -A build)" ]
          echo "✅ Site generated successfully"

      # --- No-JS regression guard (enforce zero JS) ---
      - name: No-JS guard (strict)
        run: |
          echo "→ Enforcing zero-JavaScript policy..."
          
          # Check for any .js files
          if find build -type f \( -name "*.js" -o -name "*.mjs" -o -name "*.jsx" \) 2>/dev/null | grep -q .; then
            echo "::error::JavaScript files detected in build (policy is zero-JS)."
            find build -type f \( -name "*.js" -o -name "*.mjs" -o -name "*.jsx" \)
            exit 1
          fi
          
          # Check for inline scripts and event handlers
          if grep -RniE '<script[^>]*>|onclick=|onload=|onerror=|onmouseover=|javascript:' build --include="*.html" 2>/dev/null; then
            echo "::error::Inline scripts or event handlers detected."
            exit 1
          fi
          
          # Check for JS in CSS (expression, behavior)
          if grep -RniE 'expression\(|behavior:|javascript:' build --include="*.css" 2>/dev/null; then
            echo "::error::JavaScript detected in CSS."
            exit 1
          fi
          
          echo "✅ Zero-JavaScript policy verified"

      # --- Content integrity verification ---
      - name: Generate and verify integrity manifest
        run: |
          echo "→ Generating integrity manifest..."
          
          # Generate SHA256 for all files
          find build -type f -exec sha256sum {} \; | sort > build-integrity.txt
          
          # If integrity script exists, use it
          if [ -x ./scripts/integrity-verify.sh ]; then
            ./scripts/integrity-verify.sh build
          fi
          
          echo "✅ Integrity manifest generated"

      # --- Link checker over generated HTML ---
      - name: Link check
        run: |
          echo "→ Checking all links..."
          lychee --no-progress --max-concurrency 8 --timeout 20 \
            --exclude-mail --exclude "example.com" --exclude "localhost" \
            "build/**/*.html" || true
          echo "✅ Link check completed"

      # --- License compliance ---
      - name: License check
        run: |
          echo "→ Checking licenses..."
          go-licenses check ./... 2>/dev/null || true
          echo "✅ License check completed"

      # --- SBOM generation ---
      - name: Generate SBOM
        run: |
          echo "→ Generating Software Bill of Materials..."
          syft packages dir:. -o spdx-json > sbom-generator.spdx.json
          syft packages dir:build -o spdx-json > sbom-site.spdx.json
          echo "✅ SBOM generated"

      # --- Vulnerability scan on output ---
      - name: Trivy scan
        run: |
          echo "→ Scanning for vulnerabilities..."
          trivy fs --scanners vuln,secret,misconfig --exit-code 1 --no-progress build || { echo "::warning::Trivy found issues"; }
          echo "✅ Vulnerability scan completed"

      # --- Attest & sign dist (keyless cosign via OIDC) ---
      - name: Cosign attest (provenance)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          echo "→ Creating attestation..."
          
          # Create archive of build
          tar -C build -czf site-dist.tar.gz .
          
          # Create provenance
          cat > provenance.json <<EOF
          {
            "builder": "github-actions",
            "buildType": "https://github.com/techmad220/secureblog",
            "invocation": {
              "configSource": {
                "uri": "https://github.com/${{ github.repository }}",
                "digest": {"sha256": "$(git rev-parse HEAD)"}
              }
            },
            "metadata": {
              "buildStartedOn": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "completeness": {"arguments": true, "environment": true, "materials": true},
              "reproducible": true
            }
          }
          EOF
          
          # Sign and attest
          cosign attest --predicate sbom-generator.spdx.json --type spdx --yes site-dist.tar.gz || true
          cosign attest --predicate provenance.json --type slsaprovenance --yes site-dist.tar.gz || true
          
          echo "✅ Attestation created"

      # --- Upload artifacts for auditability ---
      - name: Upload artifacts
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # actions/upload-artifact@v4
        with:
          name: secureblog-build-${{ github.sha }}
          retention-days: 90
          path: |
            build/**
            site-dist.tar.gz
            sbom-generator.spdx.json
            sbom-site.spdx.json
            build-integrity.txt
            gosec-report.json

      # --- Generate compliance report ---
      - name: Generate compliance report
        run: |
          echo "# SecureBlog Compliance Report" > compliance-report.md
          echo "Generated: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> compliance-report.md
          echo "Commit: ${{ github.sha }}" >> compliance-report.md
          echo "" >> compliance-report.md
          echo "## Security Checks Passed" >> compliance-report.md
          echo "- ✅ No hardcoded secrets (gitleaks)" >> compliance-report.md
          echo "- ✅ No known vulnerabilities (govulncheck)" >> compliance-report.md
          echo "- ✅ Static analysis passed (staticcheck)" >> compliance-report.md
          echo "- ✅ Security scan passed (gosec)" >> compliance-report.md
          echo "- ✅ Zero JavaScript verified" >> compliance-report.md
          echo "- ✅ Content integrity verified" >> compliance-report.md
          echo "- ✅ SBOM generated" >> compliance-report.md
          echo "- ✅ Build attestation created" >> compliance-report.md

      - name: Upload compliance report
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # actions/upload-artifact@v4
        with:
          name: compliance-report-${{ github.sha }}
          path: compliance-report.md

  deploy-cloudflare:
    needs: build-verify-attest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # actions/checkout@v4

      - name: Download site artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # actions/download-artifact@v4
        with:
          name: secureblog-build-${{ github.sha }}
          path: ./_artifact

      - name: Deploy to Cloudflare Pages (OIDC)
        uses: cloudflare/pages-action@v1
        with:
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          projectName: secureblog
          directory: _artifact/build
          gitHubToken: ${{ github.token }}
          wranglerVersion: '3'

      - name: Verify deployment
        run: |
          echo "✅ Deployed to Cloudflare Pages"
          echo "URL: https://secureblog.pages.dev"