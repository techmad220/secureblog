name: Test & Security Audit

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@1e31de5234b664ca3f0ed09e5ce0d6de0c5d0fc1 # actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Install dependencies
      run: go mod download
    
    - name: Run tests with coverage
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
    
    - name: Run security audit
      run: |
        # Install security tools
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        go install honnef.co/go/tools/cmd/staticcheck@latest
        go install golang.org/x/vuln/cmd/govulncheck@latest
        
        # Run security checks
        gosec -fmt json -out gosec-report.json ./...
        staticcheck ./...
        govulncheck ./...
    
    - name: Check for hardcoded secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
    
    - name: Verify NO JavaScript
      run: |
        bash .scripts/security-regression-guard.sh || true
        # Check for client-side JS (exclude worker.js which is server-side)
        if find . -name "*.html" -type f -exec grep -l "<script" {} \; | grep -v "test"; then
          echo "❌ Client-side JavaScript detected!"
          exit 1
        fi
        echo "✅ No client-side JavaScript found"
    
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          gosec-report.json
          coverage.html
