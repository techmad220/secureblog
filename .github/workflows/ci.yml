name: CI (secure)
on:
  push:
    branches: [ "**" ]
  pull_request:

permissions:
  contents: read
  security-events: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.2.2

      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version: "1.23.x"  # current stable
          check-latest: true

      - name: Go cache
        uses: actions/cache@6849a6489940f00c2f30c0fb92c6274307ccb58a # v4.1.2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Verify formatting
        run: |
          set -euo pipefail
          fmtout=$(gofmt -s -l . || true)
          if [ -n "$fmtout" ]; then
            echo "gofmt differences in:"
            echo "$fmtout"
            exit 1
          fi

      - name: Staticcheck
        uses: dominikh/staticcheck-action@b21d3b1a8c3ef3f5f852896b1341ebee4550c1c1 # v1.3.1
        with:
          version: "latest"

      - name: Verify Go module integrity
        run: |
          echo "üîç Verifying Go module integrity and checksums..."
          
          # Verify go.sum is clean and matches go.mod
          go mod verify || {
            echo "‚ùå CRITICAL: Go module verification failed"
            echo "go.sum checksums do not match downloaded modules"
            exit 1
          }
          
          # Check for any -mod=mod drift (should be read-only)
          if go mod download -json 2>&1 | grep -q "downloading"; then
            echo "‚ùå CRITICAL: Unexpected module downloads detected"
            echo "All modules should be pre-downloaded and verified"
            exit 1
          fi
          
          # Ensure go.sum exists and is not empty
          if [ ! -f "go.sum" ] || [ ! -s "go.sum" ]; then
            echo "‚ùå CRITICAL: go.sum missing or empty"
            echo "All dependencies must be hash-pinned in go.sum"
            exit 1
          fi
          
          echo "‚úÖ Go module integrity verified"

      - name: govulncheck (fail on HIGH/CRITICAL)
        uses: golang/govulncheck-action@b625fbe08f3bccbe446d94fbf87fcc875a4f50ee # v1.0.4
        with:
          go-version-input: "1.23"
          args: -format json ./...
          
      - name: Process vulnerability results  
        run: |
          echo "üîç Processing vulnerability scan results..."
          
          # Create a more strict vulnerability check
          vulns_file="govulncheck-results.json"
          if [ -f "$vulns_file" ]; then
            # Check for HIGH or CRITICAL vulnerabilities
            high_critical=$(jq '[.vulns[]? | select(.severity == "HIGH" or .severity == "CRITICAL")] | length' "$vulns_file" 2>/dev/null || echo "0")
            
            if [ "$high_critical" -gt 0 ]; then
              echo "‚ùå CRITICAL: Found $high_critical HIGH/CRITICAL vulnerabilities"
              jq '.vulns[]? | select(.severity == "HIGH" or .severity == "CRITICAL")' "$vulns_file" || true
              echo "BLOCKING: HIGH/CRITICAL vulnerabilities must be fixed before merge"
              exit 1
            fi
            
            # Report on other vulnerabilities (don't fail)
            total_vulns=$(jq '[.vulns[]?] | length' "$vulns_file" 2>/dev/null || echo "0")
            if [ "$total_vulns" -gt 0 ]; then
              echo "‚ö†Ô∏è  Found $total_vulns total vulnerabilities (non-blocking)"
              jq '.vulns[]? | select(.severity != "HIGH" and .severity != "CRITICAL")' "$vulns_file" || true
            else
              echo "‚úÖ No vulnerabilities found"
            fi
          else
            echo "‚úÖ No vulnerability results file found - assuming clean"
          fi
          
      - name: Verify read-only module mode
        run: |
          echo "üîç Verifying build uses read-only module mode..."
          
          # Test that build works with -mod=readonly
          go build -mod=readonly ./cmd/admin-server/ || {
            echo "‚ùå CRITICAL: Build fails with -mod=readonly"
            echo "This indicates go.mod/go.sum is not properly maintained"
            exit 1
          }
          
          go build -mod=readonly ./cmd/blog-generator/ || {
            echo "‚ùå CRITICAL: Build fails with -mod=readonly"  
            echo "This indicates go.mod/go.sum is not properly maintained"
            exit 1
          }
          
          echo "‚úÖ All builds work with -mod=readonly"

      - name: Secrets scan (gitleaks)
        uses: gitleaks/gitleaks-action@f9d29bd1598e73c7387e5f3c6311fd4e7e3c0367 # v2.3.7
        with:
          args: --no-banner --redact

      - name: Secure build (sandboxed)
        run: bash ./build-sandbox.sh

      - name: No-JS regression guard
        run: bash ./.scripts/nojs-guard.sh dist

      - name: Content security sanitizer (XSS prevention)
        run: bash ./scripts/content-sanitizer.sh dist/public

      - name: Secure link checker (container-based)
        run: bash ./scripts/secure-linkcheck.sh dist/public

      - name: Upload built site (PR previews etc.)
        if: always()
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        with:
          name: site-dist
          path: dist