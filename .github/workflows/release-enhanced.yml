name: Enhanced Release with Verification
on:
  push:
    tags: ["v*"]

permissions:
  contents: write
  attestations: write
  id-token: write
  packages: write

concurrency:
  group: rel-${{ github.ref }}
  cancel-in-progress: false  # Never cancel releases

jobs:
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      digest: ${{ steps.digest.outputs.digest }}
      tag: ${{ steps.tag.outputs.tag }}
    
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # step-security/harden-runner@v2
        with:
          egress-policy: audit
          
      - uses: actions/checkout@1e31de5234b664ca3f0ed09e5ce0d6de0c5d0fc1 # actions/checkout@v4
        with:
          fetch-depth: 0
          
      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # actions/setup-go@v5
        with:
          go-version: "1.23.x"
          check-latest: true
          
      - name: Install cosign
        uses: sigstore/cosign-installer@dc72c7d5c4d10cd6bcb8cf6e3fd625a9e5e537da # sigstore/cosign-installer@v3
        
      - name: Secure build (sandboxed)
        run: bash ./build-sandbox.sh
        
      - name: No-JS regression guard
        run: bash ./.scripts/nojs-guard.sh dist
        
      - name: Link checker
        run: bash ./scripts/linkcheck.sh dist
        
      - name: Pack dist with checksums
        id: pack
        run: |
          # Create tarball
          tar -C dist -czf dist.tgz .
          
          # Generate checksums
          sha256sum dist.tgz > dist.tgz.sha256
          sha512sum dist.tgz > dist.tgz.sha512
          
          # Generate digest for signing
          DIGEST=$(sha256sum dist.tgz | cut -d' ' -f1)
          echo "digest=sha256:$DIGEST" >> $GITHUB_OUTPUT
          echo "Digest: sha256:$DIGEST"
          
      - name: Extract tag
        id: tag
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          
      - name: Sign artifact with cosign
        id: sign
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          # Sign the artifact
          cosign sign-blob \
            --yes \
            --output-certificate dist.tgz.cert \
            --output-signature dist.tgz.sig \
            dist.tgz
            
          # Create bundle for easier verification
          cosign verify-blob \
            --certificate dist.tgz.cert \
            --signature dist.tgz.sig \
            --certificate-identity-regexp "https://github.com/${{ github.repository }}/.github/workflows/" \
            --certificate-oidc-issuer https://token.actions.githubusercontent.com \
            dist.tgz
            
      - name: Generate SBOM (SPDX)
        uses: anchore/sbom-action@fc46e51fd3cb168ffb36ec72c5bcf7e3e52b3b91 # anchore/sbom-action@v0
        with:
          path: ./dist
          artifact-name: sbom.spdx.json
          output-file: sbom.spdx.json
          
      - name: Sign SBOM
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign-blob \
            --yes \
            --output-certificate sbom.spdx.json.cert \
            --output-signature sbom.spdx.json.sig \
            sbom.spdx.json
            
      - name: Create verification script
        run: |
          cat > verify-release.sh << 'EOF'
          #!/bin/bash
          set -euo pipefail
          
          VERSION="${1:-${{ steps.tag.outputs.tag }}}"
          DIGEST="${2:-${{ steps.digest.outputs.digest }}}"
          
          echo "Verifying SecureBlog release ${VERSION}"
          echo "Expected digest: ${DIGEST}"
          
          # Download release artifacts
          BASE_URL="https://github.com/${{ github.repository }}/releases/download/${VERSION}"
          
          echo "Downloading release artifacts..."
          curl -LO "${BASE_URL}/dist.tgz"
          curl -LO "${BASE_URL}/dist.tgz.sig"
          curl -LO "${BASE_URL}/dist.tgz.cert"
          curl -LO "${BASE_URL}/dist.tgz.sha256"
          
          # Verify checksum
          echo "Verifying checksum..."
          sha256sum -c dist.tgz.sha256
          
          # Verify signature with cosign
          echo "Verifying signature..."
          cosign verify-blob \
            --certificate dist.tgz.cert \
            --signature dist.tgz.sig \
            --certificate-identity-regexp "https://github.com/${{ github.repository }}/.github/workflows/" \
            --certificate-oidc-issuer https://token.actions.githubusercontent.com \
            dist.tgz
          
          echo "✓ Release verification successful!"
          echo "The release is authentic and has not been tampered with."
          EOF
          
          chmod +x verify-release.sh
          
      - name: Create release notes with verification
        run: |
          cat > RELEASE_NOTES.md << 'EOF'
          ## Release ${{ steps.tag.outputs.tag }}
          
          ### 🔐 Verification
          
          This release is signed and can be verified using cosign. Run the following command to verify:
          
          ```bash
          # One-line verification
          cosign verify-blob \
            --certificate https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/dist.tgz.cert \
            --signature https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/dist.tgz.sig \
            --certificate-identity-regexp "https://github.com/${{ github.repository }}/.github/workflows/" \
            --certificate-oidc-issuer https://token.actions.githubusercontent.com \
            dist.tgz
          ```
          
          **Artifact Digest:** `${{ steps.digest.outputs.digest }}`
          
          ### 📦 Quick Verification Script
          
          ```bash
          # Download and run verification script
          curl -LO https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/verify-release.sh
          bash verify-release.sh ${{ steps.tag.outputs.tag }} ${{ steps.digest.outputs.digest }}
          ```
          
          ### 🔒 Security Features
          
          - ✅ Signed with Sigstore/cosign
          - ✅ SLSA Build Level 3 provenance
          - ✅ SBOM included (SPDX format)
          - ✅ Reproducible build
          - ✅ No JavaScript required
          
          ### 📋 Checksums
          
          ```
          SHA256: ${{ steps.digest.outputs.digest }}
          ```
          
          EOF
          
      - name: Create GitHub release
        uses: softprops/action-gh-release@e7a8f85e1c69a9ca6ba914d1d0e05ba8254ed7eb # softprops/action-gh-release@v2
        with:
          body_path: RELEASE_NOTES.md
          files: |
            dist.tgz
            dist.tgz.sig
            dist.tgz.cert
            dist.tgz.sha256
            dist.tgz.sha512
            sbom.spdx.json
            sbom.spdx.json.sig
            sbom.spdx.json.cert
            verify-release.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Attest build provenance (SLSA)
        uses: actions/attest-build-provenance@ef244123eb79f2f7a7e75d99086184180e6d0018 # actions/attest-build-provenance@v1
        with:
          subject-path: |
            dist.tgz
            sbom.spdx.json
            
      - name: Upload to R2 with retention
        if: vars.R2_ENABLED == 'true'
        run: |
          # This would upload to R2 with retention policy
          # Using the R2 deploy worker created earlier
          echo "Uploading to R2 with 90-day retention..."
          
  verify-release:
    name: Verify Release Artifacts
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # step-security/harden-runner@v2
        with:
          egress-policy: audit
          
      - name: Install cosign
        uses: sigstore/cosign-installer@dc72c7d5c4d10cd6bcb8cf6e3fd625a9e5e537da # sigstore/cosign-installer@v3
        
      - name: Download and verify release
        run: |
          TAG="${{ needs.release.outputs.tag }}"
          DIGEST="${{ needs.release.outputs.digest }}"
          
          # Download release artifacts
          BASE_URL="https://github.com/${{ github.repository }}/releases/download/${TAG}"
          
          curl -LO "${BASE_URL}/dist.tgz"
          curl -LO "${BASE_URL}/dist.tgz.sig"
          curl -LO "${BASE_URL}/dist.tgz.cert"
          curl -LO "${BASE_URL}/verify-release.sh"
          
          # Run verification script
          bash verify-release.sh ${TAG} ${DIGEST}
          
          echo "✅ Release verification successful!"