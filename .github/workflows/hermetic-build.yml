name: Hermetic Build
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  hermetic-build:
    name: Hermetic Build with Network Isolation
    runs-on: ubuntu-latest
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
    permissions:
      contents: read
      id-token: write  # Only for signing
    
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@91182cccc01eb5e619899d80e4e971d6181294a7 # v2
        with:
          egress-policy: block
          allowed-endpoints: >
            github.com:443
            api.github.com:443
            ghcr.io:443
            registry.npmjs.org:443
            
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v4
        
      - name: Verify no network calls in code
        run: |
          echo "Checking for network calls..."
          
          # Check for network access attempts
          if grep -r "http.Get\|http.Post\|net.Dial" --include="*.go" .; then
            echo "ERROR: Network calls detected in code"
            exit 1
          fi
          
          # Check for external dependencies
          if grep -r "https://\|http://" --include="*.go" --include="*.js" --include="*.html" . | grep -v "localhost\|127.0.0.1"; then
            echo "WARNING: External URLs detected"
          fi
          
          echo "✓ No network calls detected"
          
      - name: Build in hermetic container
        run: |
          # Create hermetic Dockerfile
          cat > Dockerfile.hermetic << 'EOF'
          # Use specific digest for reproducibility
          FROM golang:1.23-alpine@sha256:6c5c9590f169f77c8046e45c611d3b28fe477789b4e3d703b37a43c949b26389
          
          # No package updates (hermetic)
          RUN apk add --no-cache git make
          
          # Create build user
          RUN adduser -D -u 1000 builder
          USER builder
          WORKDIR /build
          
          # Copy only necessary files
          COPY --chown=builder:builder . .
          
          # Build with no network
          ENV GOPROXY=off \
              GOSUMDB=off \
              CGO_ENABLED=0 \
              GO111MODULE=on
          
          # Build command
          RUN make build
          EOF
          
          # Build with complete network isolation
          docker build \
            --network=none \
            --no-cache \
            --tag secureblog-hermetic:${{ github.sha }} \
            --file Dockerfile.hermetic \
            .
            
          # Extract artifacts
          docker create --name extract secureblog-hermetic:${{ github.sha }}
          docker cp extract:/build/dist ./dist
          docker rm extract
          
      - name: Content pipeline sanitization
        run: |
          echo "Running mandatory content sanitization..."
          
          # EXIF stripping (mandatory)
          find dist -type f \( -name "*.jpg" -o -name "*.jpeg" -o -name "*.png" \) -exec exiftool -all= {} \;
          
          # SVG sanitization (mandatory)
          for svg in $(find dist -name "*.svg"); do
            # Remove all script elements and event handlers
            sed -i 's/<script[^>]*>.*<\/script>//gi' "$svg"
            sed -i 's/on[a-z]*="[^"]*"//gi' "$svg"
            sed -i 's/javascript:[^"]*//gi' "$svg"
            
            # Fail if any scripts remain
            if grep -qi "script\|javascript:\|on[a-z]*=" "$svg"; then
              echo "ERROR: SVG contains scripts after sanitization: $svg"
              exit 1
            fi
          done
          
          # PDF flattening (if any)
          for pdf in $(find dist -name "*.pdf" 2>/dev/null); do
            # Convert to image and back to remove all active content
            convert -density 150 "$pdf" "${pdf%.pdf}-flat.png"
            convert "${pdf%.pdf}-flat.png" "$pdf"
            rm "${pdf%.pdf}-flat.png"
          done
          
          echo "✓ Content sanitization complete"
          
      - name: No-JS enforcement
        run: |
          ./scripts/no-js-enforcer.sh dist
          
      - name: Generate manifest with SHA-256
        run: |
          echo "Generating signed manifest..."
          
          # Generate manifest
          find dist -type f -exec sha256sum {} \; | sed 's|dist/||' > dist/manifest.sha256
          
          # Sign manifest
          echo "${{ secrets.SIGNING_KEY }}" | base64 -d > signing.key
          openssl dgst -sha256 -sign signing.key -out dist/manifest.sig dist/manifest.sha256
          rm signing.key
          
          # Generate verification script
          cat > dist/verify.sh << 'EOF'
          #!/bin/bash
          sha256sum -c manifest.sha256 || exit 1
          echo "✓ All files verified"
          EOF
          chmod +x dist/verify.sh
          
      - name: Create SBOM
        run: |
          # Generate SBOM without network access
          syft dir:dist -o spdx-json > dist/sbom.spdx.json
          syft dir:dist -o cyclonedx-json > dist/sbom.cyclonedx.json
          
      - name: Generate artifact hashes
        id: hash
        run: |
          # Generate SHA256 hashes for all artifacts for SLSA provenance
          echo "Generating hashes for SLSA provenance..."
          
          cd dist
          # Create a subjects file for SLSA
          find . -type f \( -name "*.html" -o -name "*.css" -o -name "*.png" -o -name "*.jpg" -o -name "*.svg" -o -name "manifest.sha256" \) \
            -exec sha256sum {} \; | sed 's|\./||' | \
            jq -R 'split("  ") | {name: .[1], digest: {sha256: .[0]}}' | \
            jq -s . > subjects.json
            
          # Convert to base64 for SLSA generator
          HASHES=$(cat subjects.json | base64 -w0)
          echo "hashes=$HASHES" >> $GITHUB_OUTPUT
          
          echo "✓ Generated $(cat subjects.json | jq length) artifact hashes"
          cd ..
          
      - name: Upload artifacts
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4
        with:
          name: hermetic-build-${{ github.sha }}
          path: |
            dist/
            dist/manifest.sha256
            dist/manifest.sig
            dist/sbom.*.json
          retention-days: 90
          
  verify-build:
    name: Verify Hermetic Build
    needs: hermetic-build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          name: hermetic-build-${{ github.sha }}
          path: dist/
          
      - name: Verify manifest
        run: |
          cd dist
          sha256sum -c manifest.sha256 || exit 1
          echo "✓ Manifest verification passed"
          
      - name: Verify no JavaScript
        run: |
          if find dist -name "*.js" -o -name "*.mjs" | grep -q .; then
            echo "ERROR: JavaScript files found"
            exit 1
          fi
          
          if grep -r "<script\|javascript:\|on[a-z]*=" dist --include="*.html"; then
            echo "ERROR: JavaScript detected in HTML"
            exit 1
          fi
          
          echo "✓ No JavaScript verification passed"
          
      - name: Verify headers in files
        run: |
          # Check that CSP headers are embedded in HTML
          for html in $(find dist -name "*.html"); do
            if ! grep -q "Content-Security-Policy" "$html"; then
              echo "WARNING: No CSP meta tag in $html"
            fi
          done
          
          echo "✓ Header verification complete"
          
  slsa-provenance:
    name: Generate SLSA Provenance
    needs: verify-build
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@5a775b367a56d5bd118a224a811bba288150a563 # v2.0.0
    with:
      base64-subjects: "${{ needs.hermetic-build.outputs.hashes }}"
      upload-assets: true
      provenance-name: "secureblog-provenance.intoto.jsonl"
      
  verify-provenance:
    name: Verify SLSA Provenance
    runs-on: ubuntu-latest
    needs: [hermetic-build, slsa-provenance]
    permissions:
      contents: read
    steps:
      - name: Install SLSA Verifier
        uses: slsa-framework/slsa-verifier/actions/installer@3714a2a4684014deb874a0e737dffa0ee02dd647 # v2.6.0
        
      - name: Download artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          name: hermetic-build-${{ github.sha }}
          path: artifacts/
          
      - name: Download provenance
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4
        with:
          name: "${{ needs.slsa-provenance.outputs.provenance-name }}"
          path: provenance/
          
      - name: Verify provenance
        run: |
          echo "Verifying SLSA provenance..."
          
          # Get the provenance file
          PROVENANCE_FILE=$(find provenance/ -name "*.intoto.jsonl" | head -1)
          
          if [ -z "$PROVENANCE_FILE" ]; then
            echo "ERROR: No provenance file found"
            exit 1
          fi
          
          echo "Found provenance: $PROVENANCE_FILE"
          
          # Verify each artifact against provenance
          for artifact in artifacts/dist/*; do
            if [ -f "$artifact" ]; then
              echo "Verifying: $artifact"
              slsa-verifier verify-artifact \
                --provenance-path "$PROVENANCE_FILE" \
                --source-uri github.com/${{ github.repository }} \
                --source-branch ${{ github.ref_name }} \
                "$artifact" || {
                echo "ERROR: Provenance verification failed for $artifact"
                exit 1
              }
            fi
          done
          
          echo "✓ All artifacts verified against SLSA provenance"
          
      - name: Verify build reproducibility
        run: |
          echo "Checking build reproducibility markers..."
          
          # Check that hermetic build flags were used
          if ! grep -q "GOPROXY=off" artifacts/dist/build.log 2>/dev/null; then
            echo "WARNING: Build may not be fully hermetic"
          fi
          
          # Verify no network access during build
          if grep -q "network.*allow" artifacts/dist/build.log 2>/dev/null; then
            echo "ERROR: Network access detected during build"
            exit 1
          fi
          
          echo "✓ Build reproducibility verified"