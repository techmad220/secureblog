# Ultra-secure Nginx configuration for the blog

server {
    listen 443 ssl http2;
    server_name yourdomain.com;
    root /var/www/secureblog;
    
    # SSL Configuration (get certs from Let's Encrypt)
    ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;
    
    # Strong SSL Settings
    ssl_protocols TLSv1.3;
    ssl_ciphers EECDH+AESGCM:EDH+AESGCM;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Security Headers (Maximum Security)
    add_header Content-Security-Policy "default-src 'none'; style-src 'self'; img-src 'self' data:; form-action 'none'; frame-ancestors 'none'; base-uri 'none'; upgrade-insecure-requests" always;
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=(), payment=(), usb=(), magnetometer=(), gyroscope=(), accelerometer=()" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Remove server identification
    server_tokens off;
    more_clear_headers Server;
    more_clear_headers X-Powered-By;
    
    # Disable unnecessary methods
    if ($request_method !~ ^(GET|HEAD)$) {
        return 405;
    }
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=blog:10m rate=10r/s;
    limit_req zone=blog burst=20 nodelay;
    
    # File serving
    location / {
        # Only serve specific file types
        location ~* \.(html|xml|txt)$ {
            add_header Cache-Control "public, max-age=3600";
        }
        
        location ~* \.(css)$ {
            add_header Cache-Control "public, max-age=31536000, immutable";
        }
        
        # Block everything else
        location ~ /\. {
            deny all;
        }
        
        try_files $uri $uri.html $uri/ =404;
    }
    
    # Security.txt
    location /.well-known/security.txt {
        return 200 "Contact: security@yourdomain.com\nPreferred-Languages: en\nCanonical: https://yourdomain.com/.well-known/security.txt\n";
    }
    
    # Block sensitive files
    location ~* /(integrity\.txt|_headers|\.git|\.env|\.DS_Store) {
        deny all;
    }
    
    # Custom error pages (no information leakage)
    error_page 404 403 500 502 503 504 /error.html;
    location = /error.html {
        internal;
        return 200 "<!DOCTYPE html><html><head><title>Error</title></head><body><h1>Error</h1></body></html>";
        add_header Content-Type text/html always;
    }
}

# Redirect HTTP to HTTPS
server {
    listen 80;
    server_name yourdomain.com;
    return 301 https://$server_name$request_uri;
}